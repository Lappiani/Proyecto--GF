# Anexos {#sec-anexo}
## Ejemplo código modelos de valoración de opciones
```{python}
#|eval: false 
import numpy as np

def monte_carlo_option_pricing_model(S, K, T, r, sigma, N, M, option_type='call', nivel_confianza=0.95):
    """
    S: Precio actual del activo.
    K: Precio del ejercicio.
    T: Tiempo para el vencimiento.
    r: Tasa libre de riesgo.
    sigma: Volatilidad del activo subyacente.
    N: Cantidad de pasos en el tiempo.
    M: Cantidad de simulaciones.
    option_type: Tipo de la opción ('call' o 'put').
    confidence_level: Nivel de confianza para el intervalo de confianza.
    """
    dt = T / N  # Paso tiempo
    I = np.zeros(M)  # Se inicializan los precios para cada simulación

    # Se simulan los M caminos del precio, para N pasos en el tiempo, cada uno.
    for i in range(M):
        S_t = S
        for j in range(N):
            S_t *= np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * np.random.standard_normal())
        print(S_t)
        I[i] = S_t

    # Se calculan los "pagos" en el vencimiento.
    if option_type == 'call':
        pago = np.maximum(I - K, 0)
    elif option_type == 'put':
        pago = np.maximum(K - I, 0)

    # Se descuentan los flujos para obtener el precio en t=0.
    C = np.exp(-r * T) * np.sum(pago) / M

    # Se calculan el precio promedio y el error estándar.
    precio_promedio = np.mean(pago)
    sd = np.std(pago, ddof=1) / np.sqrt(M)

    # Se calcula el intervalo de confianza.
    z = np.abs(np.percentile(np.random.normal(0, 1, M), (1 - nivel_confianza) * 100 / 2))
    lower_bound = precio_promedio - z * sd
    upper_bound = precio_promedio + z * sd

    return C, (lower_bound, upper_bound)

```

